{"ast":null,"code":"// create a reducer that will keep track of added trainers and pokemon\n// store initializes with 0 trainers in an empty array\nconst initialState = {\n  trainers: [],\n  addToMe: \"\"\n};\n\nconst trainerReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"ADD TRAINER\":\n      console.log(\"Case ADD TRAINER\", action);\n      console.log(\"state\", state); // https://redux.js.org/basics/reducers\n      // \"...\" is to spread trainers array into a new array, since we're not supposed to change state.trainers array directly\n\n      const newState = Object.assign({}, state, {\n        trainers: [...state.trainers, action.data]\n      });\n      console.log(newState);\n      return newState;\n\n    case \"ADD POKEMON\":\n      console.log(\"Case ADD POKEMON\", action);\n      console.log(\"state\", state);\n      console.log(newState);\n      return newState;\n\n    case \"ADD TO ME\":\n      console.log(\"Case ADD TO ME\", action);\n      console.log(\"state\", state);\n      console.log(newState);\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default trainerReducer;","map":{"version":3,"sources":["/Users/tracynle/Bootcamp/pokemon_mgmt/client/src/reducers/trainerReducer.jsx"],"names":["initialState","trainers","addToMe","trainerReducer","state","action","type","console","log","newState","Object","assign","data"],"mappings":"AAAA;AAEA;AACA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,EADO;AAEjBC,EAAAA,OAAO,EAAE;AAFQ,CAArB;;AAKA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACrD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,aAAL;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCH,MAAhC;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBJ,KAArB,EAFJ,CAII;AACA;;AACA,YAAMK,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,KAAlB,EAAyB;AAACH,QAAAA,QAAQ,EAAE,CAAC,GAAGG,KAAK,CAACH,QAAV,EAAoBI,MAAM,CAACO,IAA3B;AAAX,OAAzB,CAAjB;AAEAL,MAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AACA,aAAOA,QAAP;;AAEJ,SAAK,aAAL;AACIF,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCH,MAAhC;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBJ,KAArB;AAGAG,MAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AACA,aAAOA,QAAP;;AAEJ,SAAK,WAAL;AACIF,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,MAA9B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBJ,KAArB;AAEAG,MAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AACA,aAAOA,QAAP;;AAGJ;AACI,aAAOL,KAAP;AA7BR;AAgCH,CAjCD;;AAmCA,eAAeD,cAAf","sourcesContent":["// create a reducer that will keep track of added trainers and pokemon\n\n// store initializes with 0 trainers in an empty array\nconst initialState = {\n    trainers: [],\n    addToMe: \"\"\n};\n\nconst trainerReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case \"ADD TRAINER\":\n            console.log(\"Case ADD TRAINER\", action);\n            console.log(\"state\", state);\n\n            // https://redux.js.org/basics/reducers\n            // \"...\" is to spread trainers array into a new array, since we're not supposed to change state.trainers array directly\n            const newState = Object.assign({}, state, {trainers: [...state.trainers, action.data]});\n\n            console.log(newState);\n            return newState;\n\n        case \"ADD POKEMON\":\n            console.log(\"Case ADD POKEMON\", action);\n            console.log(\"state\", state);\n\n\n            console.log(newState);\n            return newState;\n\n        case \"ADD TO ME\":\n            console.log(\"Case ADD TO ME\", action);\n            console.log(\"state\", state);\n\n            console.log(newState);\n            return newState;\n\n\n        default: \n            return state;\n\n    }\n}\n\nexport default trainerReducer;\n"]},"metadata":{},"sourceType":"module"}