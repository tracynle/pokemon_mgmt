{"ast":null,"code":"var _jsxFileName = \"/Users/tracynle/Bootcamp/pokemon_mgmt/client/src/components/Patient.jsx\";\nimport React, { Component } from 'react';\n\nclass Patient extends Component {\n  // create a constructor that takes in props\n  constructor(props) {\n    super(props);\n    this.state = {\n      year: 0,\n      yearValid: false\n    };\n    console.log(\"Constructor\");\n  }\n\n  checkYear(e) {\n    console.log(e.target.value); // Check year if it is correct\n\n    let year = e.target.value; // Years between: 1900 - 2000\n\n    let valid = false; // Write a condition to check the year \n\n    if (year >= 1900 && year <= 2000) {\n      valid = true; // update the year in the state\n\n      this.setState({\n        year: year\n      });\n    } // Update yearValid state after condition is checked\n\n\n    this.setState({\n      yearValid: valid\n    });\n  } // if year is invalid, input field will turn red \n  // Where you can Update the DB...\n\n\n  componentWillUpdate() {\n    console.log(\"Will Update\");\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextState.x === 5) {\n      return false;\n    }\n\n    return true;\n  }\n\n  componentDidUpdate() {\n    console.log(\"Did Update\");\n  }\n\n  componentWillMount() {\n    console.log(\"Will Mount\");\n  }\n\n  componentDidMount() {\n    console.log(\"Did Mount\");\n    this.setState({\n      x: 6\n    });\n    console.log(\"Changed to 1000\");\n  }\n\n  render() {\n    console.log(\"Render\");\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"year\",\n      defaultValue: this.state.year,\n      onChange: e => {\n        this.checkYear(e);\n      },\n      className: this.state.yearValid ? \"\" : \"wrong\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Patient;","map":{"version":3,"sources":["/Users/tracynle/Bootcamp/pokemon_mgmt/client/src/components/Patient.jsx"],"names":["React","Component","Patient","constructor","props","state","year","yearValid","console","log","checkYear","e","target","value","valid","setState","componentWillUpdate","shouldComponentUpdate","nextProps","nextState","x","componentDidUpdate","componentWillMount","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAEA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAC5B;AACAE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,CADG;AAETC,MAAAA,SAAS,EAAE;AAFF,KAAb;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACH;;AAEDC,EAAAA,SAAS,CAACC,CAAD,EAAI;AACTH,IAAAA,OAAO,CAACC,GAAR,CAAYE,CAAC,CAACC,MAAF,CAASC,KAArB,EADS,CAET;;AACA,QAAIP,IAAI,GAAGK,CAAC,CAACC,MAAF,CAASC,KAApB,CAHS,CAIT;;AACA,QAAIC,KAAK,GAAG,KAAZ,CALS,CAQT;;AACA,QAAGR,IAAI,IAAI,IAAR,IAAgBA,IAAI,IAAI,IAA3B,EAAiC;AAC7BQ,MAAAA,KAAK,GAAG,IAAR,CAD6B,CAE7B;;AACA,WAAKC,QAAL,CAAc;AAAET,QAAAA,IAAI,EAAEA;AAAR,OAAd;AAEH,KAdQ,CAgBT;;;AACA,SAAKS,QAAL,CAAc;AAAER,MAAAA,SAAS,EAAEO;AAAb,KAAd;AAEH,GA/B2B,CAgC5B;AAEA;;;AACAE,EAAAA,mBAAmB,GAAG;AAClBR,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAEH;;AAEDQ,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACxC,QAAIA,SAAS,CAACC,CAAV,KAAgB,CAApB,EAAuB;AACnB,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH;;AAEDC,EAAAA,kBAAkB,GAAG;AACjBb,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAEH;;AAEDa,EAAAA,kBAAkB,GAAG;AACjBd,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH;;AAEDc,EAAAA,iBAAiB,GAAG;AAChBf,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,SAAKM,QAAL,CAAc;AACVK,MAAAA,CAAC,EAAE;AADO,KAAd;AAGAZ,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACH;;AAEDe,EAAAA,MAAM,GAAG;AACLhB,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGN;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,YAAY,EAAE,KAAKJ,KAAL,CAAWC,IAAxD;AAA8D,MAAA,QAAQ,EAAGK,CAAD,IAAO;AAAC,aAAKD,SAAL,CAAeC,CAAf;AAAkB,OAAlG;AAAoG,MAAA,SAAS,EAAE,KAAKN,KAAL,CAAWE,SAAX,GAAuB,EAAvB,GAA4B,OAA3I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHM,CAAP;AAQF;;AA1E2B;;AA8EhC,eAAeL,OAAf","sourcesContent":["import React, {Component} from 'react';\n\nclass Patient extends Component {\n    // create a constructor that takes in props\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            year: 0,\n            yearValid: false\n        };\n        console.log(\"Constructor\");\n    }\n\n    checkYear(e) {\n        console.log(e.target.value);\n        // Check year if it is correct\n        let year = e.target.value;\n        // Years between: 1900 - 2000\n        let valid = false;\n\n    \n        // Write a condition to check the year \n        if(year >= 1900 && year <= 2000) {\n            valid = true;\n            // update the year in the state\n            this.setState({ year: year });\n\n        }\n\n        // Update yearValid state after condition is checked\n        this.setState({ yearValid: valid });\n\n    }\n    // if year is invalid, input field will turn red \n\n    // Where you can Update the DB...\n    componentWillUpdate() {\n        console.log(\"Will Update\");\n\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextState.x === 5) {\n            return false;\n        }\n        return true;\n    }\n\n    componentDidUpdate() {\n        console.log(\"Did Update\");\n\n    }\n\n    componentWillMount() {\n        console.log(\"Will Mount\");\n    }\n\n    componentDidMount() {\n        console.log(\"Did Mount\");\n        this.setState({\n            x: 6\n        });\n        console.log(\"Changed to 1000\");\n    }\n\n    render() {\n        console.log(\"Render\");\n       return <div>\n\n        {/* <input type=\"text\" name=\"year\" defaultValue={this.state.year} onChange={this.checkYear} className={this.state.yearValid ? \"\" : \"wrong\"} /> */}\n        <input type=\"text\" name=\"year\" defaultValue={this.state.year} onChange={(e) => {this.checkYear(e)}} className={this.state.yearValid ? \"\" : \"wrong\"} />\n\n\n       </div>; \n\n    }\n\n}\n\nexport default Patient;"]},"metadata":{},"sourceType":"module"}