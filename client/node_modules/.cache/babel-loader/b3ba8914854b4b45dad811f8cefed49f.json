{"ast":null,"code":"// Actions are what you want to do\n// Add and Delete trainer and pokemon\nimport axios from 'axios'; // ===== TRAINER ACTIONS =====\n\nexport const getTrainersAction = () => {\n  // With thunk middleware, you can return a function from this action creator\n  return async (dispatch, getState) => {\n    // asynchronously fetch trainers\n    let fetchPromise = fetch(\"http://localhost:3001/api/trainers\");\n    let response = await fetchPromise;\n    let trainers = await response.json(); // trainers is an array\n\n    console.log(\"Response from fetching trainers:\", trainers); // if you want to await, don't use map, because the function in map(function)\n    // needs to be async, so those functions will run asynchronously and will not\n    // wait until they are done. So any code after the map() will run immediately.\n    //\n    // Loop through trainers. For each trainer, fetch their pokemons.\n    // Then put pokemons in the \"pokemons\" key.\n\n    for (let i = 0; i < trainers.length; i++) {\n      let trainer = trainers[i];\n      fetchPromise = fetch(\"http://localhost:3001/api/\".concat(trainer.name, \"/pokemons\"));\n      response = await fetchPromise;\n      let pokemons = await response.json();\n      trainer.pokemons = pokemons;\n    } // After all trainers and respective pokemons are fetched, dispatch\n\n\n    dispatch({\n      type: \"FETCHED TRAINERS FROM API\",\n      data: trainers\n    });\n  };\n};\nexport const addTrainer = data => {\n  return {\n    type: 'ADD TRAINER',\n    data: data\n  };\n}; // export const getDeleteTrainerAction = (name) => {\n//     return { // returns an action map\n//         type: 'DELETE TRAINER',\n//         name: name\n//     };\n// }\n\nexport const getDeleteTrainerAction = name => {\n  return async (dispatch, getState) => {\n    // returns an action function\n    // axios.delete(\"http://localhost:3001/api/trainer/?name=\" + name).then(function() {\n    //     dispatch({\n    //         type: \"TRAINER DELETED\",\n    //         name: name\n    //     });\n    // });\n    let promise = fetch(\"http://localhost:3001/api/fftrainerasdf/?name=\" + name, {\n      method: \"DELETE\",\n      // could be \"delete\" too\n      credentials: 'include'\n    });\n    await promise; // we're assuming no errors\n\n    dispatch({\n      type: \"TRAINER DELETED\",\n      name: name\n    });\n  };\n};\nexport const searchTrainer = data => {\n  return {\n    type: 'SEARCH TRAINER',\n    data: data\n  };\n}; // ===== POKEMON ACTIONS =====\n\nexport const getAddPokemonAction = data => {\n  return {\n    type: 'ADD POKEMON',\n    data: data\n  };\n};\nexport const getDeletePokemonAction = (id, name) => {\n  return {\n    type: 'DELETE POKEMON',\n    id: id,\n    name: name\n  };\n};\nexport const searchPokemon = data => {\n  return {\n    type: 'SEARCH POKEMON',\n    data: data\n  };\n};\nexport const getAddToMeAction = data => {\n  return {\n    type: 'ADD TO ME',\n    data: data\n  };\n};","map":{"version":3,"sources":["/Users/tracynle/Bootcamp/pokemon_mgmt/client/src/actions/index.js"],"names":["axios","getTrainersAction","dispatch","getState","fetchPromise","fetch","response","trainers","json","console","log","i","length","trainer","name","pokemons","type","data","addTrainer","getDeleteTrainerAction","promise","method","credentials","searchTrainer","getAddPokemonAction","getDeletePokemonAction","id","searchPokemon","getAddToMeAction"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AAEnC;AACA,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAEjC;AACA,QAAIC,YAAY,GAAGC,KAAK,CAAC,oCAAD,CAAxB;AACA,QAAIC,QAAQ,GAAG,MAAMF,YAArB;AACA,QAAIG,QAAQ,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAArB,CALiC,CAKK;;AACtCC,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDH,QAAhD,EANiC,CAQjC;AACA;AACA;AACA;AACA;AACA;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,QAAQ,CAACK,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,UAAIE,OAAO,GAAGN,QAAQ,CAACI,CAAD,CAAtB;AACAP,MAAAA,YAAY,GAAGC,KAAK,qCAA8BQ,OAAO,CAACC,IAAtC,eAApB;AACAR,MAAAA,QAAQ,GAAG,MAAMF,YAAjB;AACA,UAAIW,QAAQ,GAAG,MAAMT,QAAQ,CAACE,IAAT,EAArB;AACAK,MAAAA,OAAO,CAACE,QAAR,GAAmBA,QAAnB;AACH,KApBgC,CAsBjC;;;AACAb,IAAAA,QAAQ,CAAC;AACLc,MAAAA,IAAI,EAAE,2BADD;AAELC,MAAAA,IAAI,EAAEV;AAFD,KAAD,CAAR;AAIH,GA3BD;AA4BH,CA/BM;AAiCP,OAAO,MAAMW,UAAU,GAAID,IAAD,IAAU;AAChC,SAAO;AACHD,IAAAA,IAAI,EAAE,aADH;AAEHC,IAAAA,IAAI,EAAEA;AAFH,GAAP;AAIH,CALM,C,CAOP;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAME,sBAAsB,GAAIL,IAAD,IAAU;AAC5C,SAAO,OAAOZ,QAAP,EAAiBC,QAAjB,KAA8B;AAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AAEA,QAAIiB,OAAO,GAAGf,KAAK,CAAC,mDAAmDS,IAApD,EAA0D;AACzEO,MAAAA,MAAM,EAAE,QADiE;AACvD;AAClBC,MAAAA,WAAW,EAAE;AAF4D,KAA1D,CAAnB;AAIA,UAAMF,OAAN,CAZiC,CAYlB;;AAEflB,IAAAA,QAAQ,CAAC;AACLc,MAAAA,IAAI,EAAE,iBADD;AAELF,MAAAA,IAAI,EAAEA;AAFD,KAAD,CAAR;AAIH,GAlBD;AAmBH,CApBM;AAsBP,OAAO,MAAMS,aAAa,GAAIN,IAAD,IAAU;AACnC,SAAO;AACHD,IAAAA,IAAI,EAAE,gBADH;AAEHC,IAAAA,IAAI,EAAEA;AAFH,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,MAAMO,mBAAmB,GAAIP,IAAD,IAAU;AACzC,SAAO;AACHD,IAAAA,IAAI,EAAE,aADH;AAEHC,IAAAA,IAAI,EAAEA;AAFH,GAAP;AAIH,CALM;AAOP,OAAO,MAAMQ,sBAAsB,GAAG,CAACC,EAAD,EAAKZ,IAAL,KAAc;AAChD,SAAO;AACHE,IAAAA,IAAI,EAAE,gBADH;AAEHU,IAAAA,EAAE,EAAEA,EAFD;AAGHZ,IAAAA,IAAI,EAAEA;AAHH,GAAP;AAKH,CANM;AAQP,OAAO,MAAMa,aAAa,GAAIV,IAAD,IAAU;AACnC,SAAO;AACHD,IAAAA,IAAI,EAAE,gBADH;AAEHC,IAAAA,IAAI,EAAEA;AAFH,GAAP;AAIH,CALM;AAOP,OAAO,MAAMW,gBAAgB,GAAIX,IAAD,IAAU;AACtC,SAAO;AACHD,IAAAA,IAAI,EAAE,WADH;AAEHC,IAAAA,IAAI,EAAEA;AAFH,GAAP;AAIH,CALM","sourcesContent":["// Actions are what you want to do\n// Add and Delete trainer and pokemon\nimport axios from 'axios';\n\n// ===== TRAINER ACTIONS =====\nexport const getTrainersAction = () => {\n\n    // With thunk middleware, you can return a function from this action creator\n    return async (dispatch, getState) => {\n\n        // asynchronously fetch trainers\n        let fetchPromise = fetch(\"http://localhost:3001/api/trainers\");\n        let response = await fetchPromise;\n        let trainers = await response.json(); // trainers is an array\n        console.log(\"Response from fetching trainers:\", trainers);\n\n        // if you want to await, don't use map, because the function in map(function)\n        // needs to be async, so those functions will run asynchronously and will not\n        // wait until they are done. So any code after the map() will run immediately.\n        //\n        // Loop through trainers. For each trainer, fetch their pokemons.\n        // Then put pokemons in the \"pokemons\" key.\n        for (let i = 0; i < trainers.length; i++) {\n            let trainer = trainers[i];\n            fetchPromise = fetch(`http://localhost:3001/api/${trainer.name}/pokemons`);\n            response = await fetchPromise;\n            let pokemons = await response.json();\n            trainer.pokemons = pokemons;\n        }\n\n        // After all trainers and respective pokemons are fetched, dispatch\n        dispatch({\n            type: \"FETCHED TRAINERS FROM API\",\n            data: trainers\n        });\n    }\n};\n\nexport const addTrainer = (data) => {\n    return {\n        type: 'ADD TRAINER',\n        data: data\n    };\n}\n\n// export const getDeleteTrainerAction = (name) => {\n//     return { // returns an action map\n//         type: 'DELETE TRAINER',\n//         name: name\n//     };\n// }\n\nexport const getDeleteTrainerAction = (name) => {\n    return async (dispatch, getState) => { // returns an action function\n        // axios.delete(\"http://localhost:3001/api/trainer/?name=\" + name).then(function() {\n        //     dispatch({\n        //         type: \"TRAINER DELETED\",\n        //         name: name\n        //     });\n        // });\n\n        let promise = fetch(\"http://localhost:3001/api/fftrainerasdf/?name=\" + name, {\n            method: \"DELETE\", // could be \"delete\" too\n            credentials: 'include'\n        });\n        await promise; // we're assuming no errors\n\n        dispatch({\n            type: \"TRAINER DELETED\",\n            name: name\n        });\n    };\n}\n\nexport const searchTrainer = (data) => {\n    return {\n        type: 'SEARCH TRAINER',\n        data: data\n    };\n}\n\n// ===== POKEMON ACTIONS =====\nexport const getAddPokemonAction = (data) => {\n    return {\n        type: 'ADD POKEMON',\n        data: data\n    };\n}\n\nexport const getDeletePokemonAction = (id, name) => {\n    return {\n        type: 'DELETE POKEMON',\n        id: id,\n        name: name\n    };\n}\n\nexport const searchPokemon = (data) => {\n    return {\n        type: 'SEARCH POKEMON',\n        data: data\n    };\n}\n\nexport const getAddToMeAction = (data) => {\n    return {\n        type: 'ADD TO ME',\n        data: data\n    }\n}\n"]},"metadata":{},"sourceType":"module"}