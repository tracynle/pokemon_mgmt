{"ast":null,"code":"import _objectSpread from \"/Users/tracynle/Bootcamp/pokemon_mgmt/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n// create a reducer that will keep track of added trainers and pokemon\n// store initializes with 0 trainers in an empty array\nconst initialState = {\n  trainers: {},\n  addToMe: \"\"\n};\n\nconst trainerReducer = (state = initialState, action) => {\n  let newState;\n\n  let trainersCopy = _objectSpread({}, state.trainers);\n\n  let trainer;\n\n  switch (action.type) {\n    case \"ADD TRAINER\":\n      console.log(\"Case ADD TRAINER\", action);\n      console.log(\"state\", state); // https://redux.js.org/basics/reducers\n      // \"...\" is to spread trainers array into a new array, since we're not supposed to change state.trainers array directly\n\n      trainersCopy[action.data.name] = action.data; // {name: \"Misty\", pokemons: []}\n      // map[newKey] = newValue\n\n      newState = Object.assign({}, state, {\n        trainers: trainersCopy\n      });\n      console.log(newState);\n      return newState;\n\n    case \"ADD POKEMON\":\n      console.log(\"Case ADD POKEMON\", action);\n      console.log(\"state\", state); // get access to trainers pokemon into array\n\n      trainer = _objectSpread({}, state.trainers[state.addToMe]);\n      trainer.pokemons.push(action.data);\n      trainersCopy[state.addToMe] = trainer;\n      newState = Object.assign({}, state, {\n        trainers: trainersCopy\n      });\n      console.log(newState);\n      return newState;\n\n    case \"ADD TO ME\":\n      console.log(\"Case ADD TO ME\", action.data);\n      console.log(\"state\", state);\n      newState = Object.assign({}, state, {\n        addToMe: action.data\n      });\n      console.log(newState);\n      return newState;\n    //Delete pokemon from the array\n\n    case \"DELETE POKEMON\":\n      console.log(\"Case DELETE POKEMON\", action.id);\n      console.log(\"state\", state); // get trainer object from the state and get the trainer's name from the action that was dispatched\n      // Get pokemon out of trainer by name\n\n      trainer = _objectSpread({}, state.trainers[action.name]);\n      console.log(\"ACTION.NAME BBBB\", action.name); // pokemon array. saved in a copy\n\n      let pokemons = trainer.pokemons;\n      console.log(\"TRAINER AAAAA\", trainer); // find the index of the pokemon from the array (loop) by id\n\n      let index;\n\n      for (let i = 0; i < pokemons.length; i++) {\n        let pokemon = pokemons[i];\n\n        if (pokemon.id == action.id) {\n          index = i;\n          break;\n        }\n      } // splice pokemon array to delete \n\n\n      pokemons.splice(index, 1); // update trainer's pokemon after deleting\n\n      trainer.pokemons = pokemons;\n      trainersCopy[action.name] = trainer;\n      newState = Object.assign({}, state, {\n        trainers: trainersCopy\n      });\n      console.log(\"Delete pokemon newState\", newState);\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default trainerReducer;","map":{"version":3,"sources":["/Users/tracynle/Bootcamp/pokemon_mgmt/client/src/reducers/trainerReducer.jsx"],"names":["initialState","trainers","addToMe","trainerReducer","state","action","newState","trainersCopy","trainer","type","console","log","data","name","Object","assign","pokemons","push","id","index","i","length","pokemon","splice"],"mappings":"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","sourcesContent":["// create a reducer that will keep track of added trainers and pokemon\n\n// store initializes with 0 trainers in an empty array\nconst initialState = {\n    trainers: {},\n    addToMe: \"\"\n};\n\nconst trainerReducer = (state = initialState, action) => {\n    let newState;\n    let trainersCopy = {...state.trainers};\n    let trainer;\n\n    switch(action.type) {\n\n        case \"ADD TRAINER\":\n            console.log(\"Case ADD TRAINER\", action);\n            console.log(\"state\", state);\n\n            // https://redux.js.org/basics/reducers\n            // \"...\" is to spread trainers array into a new array, since we're not supposed to change state.trainers array directly\n\n            trainersCopy[action.data.name] = action.data; // {name: \"Misty\", pokemons: []}\n            // map[newKey] = newValue\n\n            newState = Object.assign(\n                {}, \n                state, \n                {trainers: trainersCopy} \n            );\n\n            console.log(newState);\n            return newState;\n\n        case \"ADD POKEMON\":\n            console.log(\"Case ADD POKEMON\", action);\n            console.log(\"state\", state);\n\n            // get access to trainers pokemon into array\n            trainer = {...state.trainers[state.addToMe]}\n            trainer.pokemons.push(action.data);\n\n            trainersCopy[state.addToMe] = trainer;\n            \n            newState = Object.assign(\n                {},\n                state,\n                {trainers: trainersCopy}\n            );\n\n            console.log(newState);\n            return newState;\n\n        case \"ADD TO ME\":\n            console.log(\"Case ADD TO ME\", action.data);\n            console.log(\"state\", state);\n\n            newState = Object.assign(\n                {}, \n                state, \n                {addToMe: action.data}\n            );\n            console.log(newState);\n            return newState;\n\n            \n\n        //Delete pokemon from the array\n        case \"DELETE POKEMON\":\n            console.log(\"Case DELETE POKEMON\", action.id);\n            console.log(\"state\", state);\n\n            // get trainer object from the state and get the trainer's name from the action that was dispatched\n            // Get pokemon out of trainer by name\n            trainer = {...state.trainers[action.name]};\n            console.log(\"ACTION.NAME BBBB\", action.name);\n            // pokemon array. saved in a copy\n            let pokemons = trainer.pokemons;\n            console.log(\"TRAINER AAAAA\", trainer);\n\n            \n            // find the index of the pokemon from the array (loop) by id\n            let index;\n            for (let i = 0; i < pokemons.length; i++) {\n                let pokemon = pokemons[i];\n                if (pokemon.id == action.id) {\n                    index = i;\n                    break;\n                }\n            }\n            // splice pokemon array to delete \n            pokemons.splice(index, 1);\n            // update trainer's pokemon after deleting\n            trainer.pokemons = pokemons;\n\n            trainersCopy[action.name] = trainer;\n            \n            newState = Object.assign({}, state, {trainers: trainersCopy});\n            \n            console.log(\"Delete pokemon newState\",newState);\n\n            return newState;\n\n\n        default: \n            return state;\n\n    }\n}\n\nexport default trainerReducer;\n"]},"metadata":{},"sourceType":"module"}