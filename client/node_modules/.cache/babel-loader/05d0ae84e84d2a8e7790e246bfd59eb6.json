{"ast":null,"code":"import _objectSpread from \"/Users/tracynle/Bootcamp/pokemon_mgmt/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n// create a reducer that will keep track of added trainers and pokemon\n// store initializes with 0 trainers in an empty array\nconst initialState = {\n  trainers: {},\n  addToMe: \"\"\n};\n\nconst trainerReducer = (state = initialState, action) => {\n  let newState;\n\n  let trainersCopy = _objectSpread({}, state.trainers);\n\n  let trainer;\n\n  switch (action.type) {\n    case \"FETCHED TRAINERS FROM API\":\n      action.data.map(trainer => {\n        trainersCopy[trainer.name] = trainer;\n      });\n      newState = Object.assign({}, state, {\n        trainers: trainersCopy\n      });\n      return newState;\n\n    case \"ADDED TRAINER\":\n      console.log(\"Case ADD TRAINER\", action);\n      console.log(\"ADD TRAINER state\", state); // https://redux.js.org/basics/reducers\n      // \"...\" is to spread trainers array into a new array, since we're not supposed to change state.trainers array directly\n\n      trainersCopy[action.data.name] = action.data; // {name: \"Misty\", pokemons: []}\n      // map[newKey] = newValue\n\n      newState = Object.assign({}, state, {\n        trainers: trainersCopy\n      });\n      console.log(newState);\n      return newState;\n\n    case \"TRAINER DELETED\":\n      // used to be \"DELETE TRAINER\"\n      console.log(\"Case DELETE TRAINER\", action.name);\n      console.log(\"Delete Trainer state\", state);\n      trainersCopy = _objectSpread({}, state.trainers);\n      delete trainersCopy[action.name];\n      newState = Object.assign({}, state, {\n        trainers: trainersCopy\n      });\n      return newState;\n\n    case \"ADDED POKEMON\":\n      console.log(\"Case ADD POKEMON\", action);\n      console.log(\"ADD POKEMON state\", state); // get access to trainers pokemon into array\n\n      trainer = _objectSpread({}, state.trainers[state.addToMe]);\n      trainer.pokemons.push(action.data);\n      trainersCopy[state.addToMe] = trainer;\n      newState = Object.assign({}, state, {\n        trainers: trainersCopy\n      });\n      console.log(newState);\n      return newState;\n\n    case \"ADD TO ME\":\n      console.log(\"Case ADD TO ME\", action.data);\n      console.log(\"ADD TO ME state\", state);\n      newState = Object.assign({}, state, {\n        addToMe: action.data\n      });\n      console.log(newState);\n      return newState;\n    //Delete pokemon from the array\n\n    case \"DELETED POKEMON\":\n      console.log(\"Case DELETED POKEMON\", action.id);\n      console.log(\"Delete Pokemon state\", state); // get trainer object from the state and get the trainer's \n      // name from the action that was dispatched\n      // Get pokemon out of trainer by name\n\n      trainer = _objectSpread({}, state.trainers[action.trainerName]); // pokemon array. saved in a copy\n\n      let pokemons = trainer.pokemons; // find the index of the pokemon from the array (loop) by id\n\n      let index;\n\n      for (let i = 0; i < pokemons.length; i++) {\n        let pokemon = pokemons[i];\n\n        if (pokemon.id == action.id) {\n          index = i;\n          break;\n        }\n      } // splice pokemon array to delete \n\n\n      pokemons.splice(index, 1);\n      console.log(\"POKEMONS SPLICE\", pokemons); // update trainer's pokemon after deleting\n\n      trainer.pokemons = pokemons;\n      console.log(\"Trainer.pokemons:\", trainer.pokemons);\n      trainersCopy[action.trainerName] = trainer;\n      newState = Object.assign({}, state, {\n        trainers: trainersCopy\n      });\n      console.log(\"Deleted pokemon newState\", newState);\n      return newState;\n    // case \"SEARCH\"\n\n    default:\n      return state;\n  }\n};\n\nexport default trainerReducer;","map":{"version":3,"sources":["/Users/tracynle/Bootcamp/pokemon_mgmt/client/src/reducers/trainerReducer.jsx"],"names":["initialState","trainers","addToMe","trainerReducer","state","action","newState","trainersCopy","trainer","type","data","map","name","Object","assign","console","log","pokemons","push","id","trainerName","index","i","length","pokemon","splice"],"mappings":"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","sourcesContent":["// create a reducer that will keep track of added trainers and pokemon\n\n// store initializes with 0 trainers in an empty array\nconst initialState = {\n    trainers: {},\n    addToMe: \"\"\n};\n\nconst trainerReducer = (state = initialState, action) => {\n    let newState;\n    let trainersCopy = {...state.trainers};\n    let trainer;\n\n    switch(action.type) {\n\n        case \"FETCHED TRAINERS FROM API\":\n            action.data.map(trainer => {\n                trainersCopy[trainer.name] = trainer;\n            });\n\n            newState = Object.assign({}, state, {trainers: trainersCopy});\n            return newState;\n\n        case \"ADDED TRAINER\":\n            console.log(\"Case ADD TRAINER\", action);\n            console.log(\"ADD TRAINER state\", state);\n\n            // https://redux.js.org/basics/reducers\n            // \"...\" is to spread trainers array into a new array, since we're not supposed to change state.trainers array directly\n\n            trainersCopy[action.data.name] = action.data; // {name: \"Misty\", pokemons: []}\n            // map[newKey] = newValue\n\n            newState = Object.assign(\n                {}, \n                state, \n                {trainers: trainersCopy} \n            );\n\n            console.log(newState);\n            return newState;\n        \n\n\n        case \"TRAINER DELETED\": // used to be \"DELETE TRAINER\"\n            console.log(\"Case DELETE TRAINER\", action.name);\n            console.log(\"Delete Trainer state\", state);\n            \n            trainersCopy = {...state.trainers}\n            delete trainersCopy[action.name];\n            \n            newState = Object.assign({}, state, {trainers: trainersCopy} )\n            return newState;\n\n        case \"ADDED POKEMON\":\n            console.log(\"Case ADD POKEMON\", action);\n            console.log(\"ADD POKEMON state\", state);\n\n            // get access to trainers pokemon into array\n            trainer = {...state.trainers[state.addToMe]}\n            trainer.pokemons.push(action.data);\n\n            trainersCopy[state.addToMe] = trainer;\n            \n            newState = Object.assign(\n                {},\n                state,\n                {trainers: trainersCopy}\n            );\n\n            console.log(newState);\n            return newState;\n\n        case \"ADD TO ME\":\n            console.log(\"Case ADD TO ME\", action.data);\n            console.log(\"ADD TO ME state\", state);\n\n            newState = Object.assign(\n                {}, \n                state, \n                {addToMe: action.data}\n            );\n            console.log(newState);\n            return newState;\n\n            \n\n        //Delete pokemon from the array\n        case \"DELETED POKEMON\":\n            console.log(\"Case DELETED POKEMON\", action.id);\n            console.log(\"Delete Pokemon state\", state);\n\n            // get trainer object from the state and get the trainer's \n            // name from the action that was dispatched\n            // Get pokemon out of trainer by name\n            trainer = {...state.trainers[action.trainerName]};\n            // pokemon array. saved in a copy\n            let pokemons = trainer.pokemons;\n\n            // find the index of the pokemon from the array (loop) by id\n            let index;\n            for (let i = 0; i < pokemons.length; i++) {\n                let pokemon = pokemons[i];\n                if (pokemon.id == action.id) {\n                    index = i;\n                    break;\n                }\n            }\n            // splice pokemon array to delete \n            pokemons.splice(index, 1);\n            console.log(\"POKEMONS SPLICE\", pokemons)\n            // update trainer's pokemon after deleting\n            trainer.pokemons = pokemons;\n            console.log(\"Trainer.pokemons:\", trainer.pokemons);\n            trainersCopy[action.trainerName] = trainer;\n            \n            newState = Object.assign({}, state, {trainers: trainersCopy});\n            \n            console.log(\"Deleted pokemon newState\", newState);\n\n            return newState;\n        \n        // case \"SEARCH\"\n\n        default: \n            return state;\n\n    }\n}\n\nexport default trainerReducer;\n"]},"metadata":{},"sourceType":"module"}