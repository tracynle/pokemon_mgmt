{"ast":null,"code":"var _jsxFileName = \"/Users/tracynle/Bootcamp/pokemon_mgmt/client/src/components/Patient.jsx\";\nimport React, { Component } from 'react';\n\nclass Patient extends Component {\n  // create a constructor that takes in props\n  constructor(props) {\n    super(props);\n    this.state = {\n      year: 0,\n      yearValid: false\n    };\n  }\n\n  checkYear(e) {\n    console.log(e.target.value); // Check year if it is correct\n\n    let year = e.target.value; // Years between: 1900 - 2000\n\n    let valid = false; // Write a condition to check the year \n\n    if (year >= 1900 && year <= 2000) {\n      valid = true; // update the year in the state\n\n      this.setState({\n        year: year\n      });\n    } // Update yearValid state after condition is checked\n\n\n    this.setState({\n      yearValid: valid\n    });\n  } // if year is invalid, input field should turn red \n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"year\",\n      defaultValue: this.state.year,\n      onChange: this.checkYear,\n      className: this.state.yearValid ? \"\" : \"wrong\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"year\",\n      defaultValue: this.state.year,\n      onChange: this.checkYear,\n      className: this.state.yearValid ? \"\" : \"wrong\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Patient;","map":{"version":3,"sources":["/Users/tracynle/Bootcamp/pokemon_mgmt/client/src/components/Patient.jsx"],"names":["React","Component","Patient","constructor","props","state","year","yearValid","checkYear","e","console","log","target","value","valid","setState","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAEA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAC5B;AACAE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,CADG;AAETC,MAAAA,SAAS,EAAE;AAFF,KAAb;AAIH;;AAEDC,EAAAA,SAAS,CAACC,CAAD,EAAI;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,MAAF,CAASC,KAArB,EADS,CAET;;AACA,QAAIP,IAAI,GAAGG,CAAC,CAACG,MAAF,CAASC,KAApB,CAHS,CAIT;;AACA,QAAIC,KAAK,GAAG,KAAZ,CALS,CAQT;;AACA,QAAGR,IAAI,IAAI,IAAR,IAAgBA,IAAI,IAAI,IAA3B,EAAiC;AAC7BQ,MAAAA,KAAK,GAAG,IAAR,CAD6B,CAE7B;;AACA,WAAKC,QAAL,CAAc;AAAET,QAAAA,IAAI,EAAEA;AAAR,OAAd;AAEH,KAdQ,CAgBT;;;AACA,SAAKS,QAAL,CAAc;AAAER,MAAAA,SAAS,EAAEO;AAAb,KAAd;AAEH,GA9B2B,CA+B5B;;;AAEAE,EAAAA,MAAM,GAAG;AAEN,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEN;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,YAAY,EAAE,KAAKX,KAAL,CAAWC,IAAxD;AAA8D,MAAA,QAAQ,EAAE,KAAKE,SAA7E;AAAwF,MAAA,SAAS,EAAE,KAAKH,KAAL,CAAWE,SAAX,GAAuB,EAAvB,GAA4B,OAA/H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFM,EAGN;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,YAAY,EAAE,KAAKF,KAAL,CAAWC,IAAxD;AAA8D,MAAA,QAAQ,EAAE,KAAKE,SAA7E;AAAwF,MAAA,SAAS,EAAE,KAAKH,KAAL,CAAWE,SAAX,GAAuB,EAAvB,GAA4B,OAA/H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHM,CAAP;AAQF;;AA3C2B;;AA+ChC,eAAeL,OAAf","sourcesContent":["import React, {Component} from 'react';\n\nclass Patient extends Component {\n    // create a constructor that takes in props\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            year: 0,\n            yearValid: false\n        };\n    }\n\n    checkYear(e) {\n        console.log(e.target.value);\n        // Check year if it is correct\n        let year = e.target.value;\n        // Years between: 1900 - 2000\n        let valid = false;\n\n    \n        // Write a condition to check the year \n        if(year >= 1900 && year <= 2000) {\n            valid = true;\n            // update the year in the state\n            this.setState({ year: year });\n\n        }\n\n        // Update yearValid state after condition is checked\n        this.setState({ yearValid: valid });\n\n    }\n    // if year is invalid, input field should turn red \n\n    render() {\n\n       return <div>\n\n        <input type=\"text\" name=\"year\" defaultValue={this.state.year} onChange={this.checkYear} className={this.state.yearValid ? \"\" : \"wrong\"} />\n        <input type=\"text\" name=\"year\" defaultValue={this.state.year} onChange={this.checkYear} className={this.state.yearValid ? \"\" : \"wrong\"} />\n\n\n       </div>; \n\n    }\n\n}\n\nexport default Patient;"]},"metadata":{},"sourceType":"module"}