{"ast":null,"code":"// create a reducer that will keep track of added trainers and pokemon\n// store initializes with 0 trainers in an empty array\nconst initialState = {\n  trainers: [],\n  addToMe: \"\"\n};\n\nconst trainerReducer = (state = initialState, action) => {\n  let newState;\n\n  switch (action.type) {\n    case \"ADD TRAINER\":\n      console.log(\"Case ADD TRAINER\", action);\n      console.log(\"state\", state); // https://redux.js.org/basics/reducers\n      // \"...\" is to spread trainers array into a new array, since we're not supposed to change state.trainers array directly\n\n      newState = Object.assign({}, state, {\n        trainers: [...state.trainers, action.data]\n      });\n      console.log(newState);\n      return newState;\n\n    case \"ADD POKEMON\":\n      console.log(\"Case ADD POKEMON\", action);\n      console.log(\"state\", state);\n      console.log(newState);\n      return newState;\n\n    case \"ADD TO ME\":\n      console.log(\"Case ADD TO ME\", action.data);\n      console.log(\"state\", state);\n      newState = Object.assign({}, state, {\n        addToMe: action.data\n      });\n      console.log(newState);\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default trainerReducer;","map":{"version":3,"sources":["/Users/tracynle/Bootcamp/pokemon_mgmt/client/src/reducers/trainerReducer.jsx"],"names":["initialState","trainers","addToMe","trainerReducer","state","action","newState","type","console","log","Object","assign","data"],"mappings":"AAAA;AAEA;AACA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,EADO;AAEjBC,EAAAA,OAAO,EAAE;AAFQ,CAArB;;AAKA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACrD,MAAIC,QAAJ;;AAEA,UAAOD,MAAM,CAACE,IAAd;AAEI,SAAK,aAAL;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCJ,MAAhC;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBL,KAArB,EAFJ,CAII;AACA;;AACAE,MAAAA,QAAQ,GAAGI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,KAAlB,EAAyB;AAACH,QAAAA,QAAQ,EAAE,CAAC,GAAGG,KAAK,CAACH,QAAV,EAAoBI,MAAM,CAACO,IAA3B;AAAX,OAAzB,CAAX;AAEAJ,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,aAAOA,QAAP;;AAEJ,SAAK,aAAL;AACIE,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCJ,MAAhC;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBL,KAArB;AAIAI,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,aAAOA,QAAP;;AAEJ,SAAK,WAAL;AACIE,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BJ,MAAM,CAACO,IAArC;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBL,KAArB;AAEAE,MAAAA,QAAQ,GAAGI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,KAAlB,EAAyB;AAACF,QAAAA,OAAO,EAAEG,MAAM,CAACO;AAAjB,OAAzB,CAAX;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,aAAOA,QAAP;;AAKJ;AACI,aAAOF,KAAP;AAlCR;AAqCH,CAxCD;;AA0CA,eAAeD,cAAf","sourcesContent":["// create a reducer that will keep track of added trainers and pokemon\n\n// store initializes with 0 trainers in an empty array\nconst initialState = {\n    trainers: [],\n    addToMe: \"\"\n};\n\nconst trainerReducer = (state = initialState, action) => {\n    let newState;\n    \n    switch(action.type) {\n\n        case \"ADD TRAINER\":\n            console.log(\"Case ADD TRAINER\", action);\n            console.log(\"state\", state);\n\n            // https://redux.js.org/basics/reducers\n            // \"...\" is to spread trainers array into a new array, since we're not supposed to change state.trainers array directly\n            newState = Object.assign({}, state, {trainers: [...state.trainers, action.data]});\n\n            console.log(newState);\n            return newState;\n\n        case \"ADD POKEMON\":\n            console.log(\"Case ADD POKEMON\", action);\n            console.log(\"state\", state);\n\n\n\n            console.log(newState);\n            return newState;\n\n        case \"ADD TO ME\":\n            console.log(\"Case ADD TO ME\", action.data);\n            console.log(\"state\", state);\n\n            newState = Object.assign({}, state, {addToMe: action.data})\n            console.log(newState);\n            return newState;\n\n        \n            \n\n        default: \n            return state;\n\n    }\n}\n\nexport default trainerReducer;\n"]},"metadata":{},"sourceType":"module"}