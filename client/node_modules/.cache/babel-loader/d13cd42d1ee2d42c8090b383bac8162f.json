{"ast":null,"code":"import _objectSpread from \"/Users/tracynle/Bootcamp/pokemon_mgmt/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { stat } from \"fs\"; // create a reducer that will keep track of added trainers and pokemon\n// store initializes with 0 trainers in an empty array\n\nconst initialState = {\n  trainers: {},\n  addToMe: \"\"\n};\n\nconst trainerReducer = (state = initialState, action) => {\n  let newState;\n\n  switch (action.type) {\n    case \"ADD TRAINER\":\n      console.log(\"Case ADD TRAINER\", action);\n      console.log(\"state\", state); // https://redux.js.org/basics/reducers\n      // \"...\" is to spread trainers array into a new array, since we're not supposed to change state.trainers array directly\n\n      let trainersCopy = _objectSpread({}, state.trainers);\n\n      trainersCopy[action.data.name] = action.data; // {name: \"Misty\", pokemons: []}\n      // map[newKey] = newValue\n\n      newState = Object.assign({}, state, // {trainers: {...state.trainers}}\n      {\n        trainers: trainersCopy // \n\n      });\n      console.log(newState);\n      return newState;\n\n    case \"ADD POKEMON\":\n      console.log(\"Case ADD POKEMON\", action);\n      console.log(\"state\", state); // get access to trainers pokemon into array\n\n      let trainer = _objectSpread({}, state.trainers[state.addToMe]);\n\n      trainer.pokemons.push(action.data);\n      trainersCopy[state.addToMe] = trainer;\n      console.log(newState);\n      return newState;\n\n    case \"ADD TO ME\":\n      console.log(\"Case ADD TO ME\", action.data);\n      console.log(\"state\", state);\n      newState = Object.assign({}, state, {\n        addToMe: action.data\n      });\n      console.log(newState);\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default trainerReducer;","map":{"version":3,"sources":["/Users/tracynle/Bootcamp/pokemon_mgmt/client/src/reducers/trainerReducer.jsx"],"names":["stat","initialState","trainers","addToMe","trainerReducer","state","action","newState","type","console","log","trainersCopy","data","name","Object","assign","trainer","pokemons","push"],"mappings":";AAAA,SAASA,IAAT,QAAqB,IAArB,C,CAEA;AAEA;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,EADO;AAEjBC,EAAAA,OAAO,EAAE;AAFQ,CAArB;;AAKA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACrD,MAAIC,QAAJ;;AAEA,UAAOD,MAAM,CAACE,IAAd;AAEI,SAAK,aAAL;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCJ,MAAhC;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBL,KAArB,EAFJ,CAII;AACA;;AACA,UAAIM,YAAY,qBAAON,KAAK,CAACH,QAAb,CAAhB;;AAEAS,MAAAA,YAAY,CAACL,MAAM,CAACM,IAAP,CAAYC,IAAb,CAAZ,GAAiCP,MAAM,CAACM,IAAxC,CARJ,CAQkD;AAC9C;;AAEAL,MAAAA,QAAQ,GAAGO,MAAM,CAACC,MAAP,CACP,EADO,EAEPV,KAFO,EAGP;AACA;AAACH,QAAAA,QAAQ,EAAES,YAAX,CAAyB;;AAAzB,OAJO,CAAX;AAOAF,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,aAAOA,QAAP;;AAEJ,SAAK,aAAL;AACIE,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCJ,MAAhC;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBL,KAArB,EAFJ,CAII;;AAEA,UAAIW,OAAO,qBAAOX,KAAK,CAACH,QAAN,CAAeG,KAAK,CAACF,OAArB,CAAP,CAAX;;AACAa,MAAAA,OAAO,CAACC,QAAR,CAAiBC,IAAjB,CAAsBZ,MAAM,CAACM,IAA7B;AAEAD,MAAAA,YAAY,CAACN,KAAK,CAACF,OAAP,CAAZ,GAA8Ba,OAA9B;AAEAP,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,aAAOA,QAAP;;AAEJ,SAAK,WAAL;AACIE,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BJ,MAAM,CAACM,IAArC;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBL,KAArB;AAEAE,MAAAA,QAAQ,GAAGO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,KAAlB,EAAyB;AAACF,QAAAA,OAAO,EAAEG,MAAM,CAACM;AAAjB,OAAzB,CAAX;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,aAAOA,QAAP;;AAKJ;AACI,aAAOF,KAAP;AAjDR;AAoDH,CAvDD;;AAyDA,eAAeD,cAAf","sourcesContent":["import { stat } from \"fs\";\n\n// create a reducer that will keep track of added trainers and pokemon\n\n// store initializes with 0 trainers in an empty array\nconst initialState = {\n    trainers: {},\n    addToMe: \"\"\n};\n\nconst trainerReducer = (state = initialState, action) => {\n    let newState;\n    \n    switch(action.type) {\n\n        case \"ADD TRAINER\":\n            console.log(\"Case ADD TRAINER\", action);\n            console.log(\"state\", state);\n\n            // https://redux.js.org/basics/reducers\n            // \"...\" is to spread trainers array into a new array, since we're not supposed to change state.trainers array directly\n            let trainersCopy = {...state.trainers};\n\n            trainersCopy[action.data.name] = action.data; // {name: \"Misty\", pokemons: []}\n            // map[newKey] = newValue\n\n            newState = Object.assign(\n                {}, \n                state, \n                // {trainers: {...state.trainers}}\n                {trainers: trainersCopy} // \n            );\n\n            console.log(newState);\n            return newState;\n\n        case \"ADD POKEMON\":\n            console.log(\"Case ADD POKEMON\", action);\n            console.log(\"state\", state);\n            \n            // get access to trainers pokemon into array\n\n            let trainer = {...state.trainers[state.addToMe]}\n            trainer.pokemons.push(action.data);\n\n            trainersCopy[state.addToMe] = trainer;\n            \n            console.log(newState);\n            return newState;\n\n        case \"ADD TO ME\":\n            console.log(\"Case ADD TO ME\", action.data);\n            console.log(\"state\", state);\n\n            newState = Object.assign({}, state, {addToMe: action.data})\n            console.log(newState);\n            return newState;\n\n        \n            \n\n        default: \n            return state;\n\n    }\n}\n\nexport default trainerReducer;\n"]},"metadata":{},"sourceType":"module"}